version: '3'

services:
  ts_database:
    container_name: vulnerability-tsengine-database
    build:
        context: ./
        dockerfile: ./database/Dockerfile.centos
    image: vulnerability-tsengine-database:latest
    restart: unless-stopped
    shm_size: '256mb'
    env_file:
      - ./conf/common.env
      - ./conf/database.env
    ports:
      - 15432:5432
    volumes:
      - vulnerability-tsengine-db-data:/var/lib/pgsql/data

#  ts_evaluator_recalc:
#    command: /engine/entrypoint.sh evaluator
#    container_name: vulnerability-tsengine-evaluator-recalc
#    build:
#      context: ./
#      dockerfile: ./Dockerfile
#      args:
#        PIPENV_CHECK: "${PIPENV_CHECK:-1}"
#    image: vulnerability-tsengine-app:latest
#    restart: unless-stopped
#    env_file:
#      - ./conf/common.env
#      - ./conf/evaluator.env
#      - ./conf/evaluator_recalc.env
#    ports:
#      - 8084:8085
#    depends_on:
#      - ts_database
#      - ts_platform_mock

#  ts_evaluator_upload:
#    command: /engine/entrypoint.sh evaluator
#    container_name: vulnerability-tsengine-evaluator-upload
#    build:
#      context: ./
#      dockerfile: ./Dockerfile
#      args:
#        PIPENV_CHECK: "${PIPENV_CHECK:-1}"
#    image: vulnerability-tsengine-app:latest
#    restart: unless-stopped
#    env_file:
#      - ./conf/common.env
#      - ./conf/evaluator.env
#      - ./conf/evaluator_upload.env
#    ports:
#      - 8085:8085
#    depends_on:
#      - ts_database
#      - ts_platform_mock

#  ts_listener:
#    command: /engine/entrypoint.sh listener
#    container_name: vulnerability-tsengine-listener
#    build:
#        context: ./
#        dockerfile: ./Dockerfile
#        args:
#          PIPENV_CHECK: "${PIPENV_CHECK:-1}"
#    image: vulnerability-tsengine-app:latest
#    restart: unless-stopped
#    env_file:
#      - ./conf/common.env
#      - ./conf/listener.env
#    ports:
#      - 8086:8086
#    depends_on:
#      - ts_database
#      - ts_platform_mock

  # ts_manager:
  #   command: /engine/entrypoint.sh manager
  #   container_name: vulnerability-tsengine-manager
  #   build:
  #     context: ./
  #     dockerfile: ./Dockerfile
  #     args:
  #       PIPENV_CHECK: "${PIPENV_CHECK:-1}"
  #   image: vulnerability-tsengine-app:latest
  #   restart: unless-stopped
  #   env_file:
  #     - ./conf/common.env
  #     - ./conf/manager.env
  #   ports:
  #     - 8300:8000
  #   depends_on:
  #     - ts_database
  #     - ts_platform_mock
  
  # ts_manager_admin:
  #   command: /engine/entrypoint.sh manager-admin
  #   container_name: vulnerability-tsengine-manager-admin
  #   build:
  #     context: ./
  #     dockerfile: ./Dockerfile
  #     args:
  #       PIPENV_CHECK: "${PIPENV_CHECK:-1}"
  #   image: vulnerability-tsengine-app:latest
  #   restart: unless-stopped
  #   env_file:
  #     - ./conf/common.env
  #     - ./conf/manager.env
  #   ports:
  #     - 8400:8000
  #   depends_on:
  #     - ts_database
  #     - ts_platform_mock

  ts_platform_mock:
    container_name: ts-platform-mock
    build:
        context: ./
        dockerfile: ./platform_mock/Dockerfile
        args:
          PIPENV_CHECK: "${PIPENV_CHECK:-1}"

    image: vulnerability-tsengine-mock:latest
    restart: unless-stopped
    env_file:
      - ./conf/common.env
      - ./conf/platform_mock.env
    ports:
      - 9092:9092
      - 8100:8000
    tmpfs: /tmp

  # ts_vmaas_sync:
  #   command: /engine/entrypoint.sh vmaas-sync
  #   container_name: vulnerability-tsengine-vmaas-sync
  #   build:
  #       context: ./
  #       dockerfile: ./Dockerfile
  #       args:
  #         PIPENV_CHECK: "${PIPENV_CHECK:-1}"
  #   image: vulnerability-tsengine-app:latest
  #   restart: unless-stopped
  #   env_file:
  #     - ./conf/common.env
  #     - ./conf/vmaas-sync.env
  #   ports:
  #     - 8200:8000
  #     - 8087:8087
  #   depends_on:
  #     - ts_database
  #     - ts_platform_mock

  # ts_prometheus:
  #   container_name: vulnerability-tsengine-prometheus
  #   image: prom/prometheus:v2.21.0
  #   volumes:
  #     - ts-prometheus-data:/prometheus
  #     - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   security_opt:
  #     - label=disable
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   ports:
  #     - 9091:9090
  #   depends_on:
  #     - ts_evaluator_recalc
  #     - ts_evaluator_upload
  #     - ts_listener
  #     - ts_manager
  #   restart: always
  #   logging:
  #     driver: none

  # ts_grafana:
  #   container_name: vulnerability-tsengine-grafana
  #   build:
  #     context: ./
  #     dockerfile: ./monitoring/grafana/Dockerfile
  #   image: vulnerability-tsengine-grafana:latest
  #   depends_on:
  #     - ts_prometheus
  #   ports:
  #     - 3001:3000
  #   restart: always
  #   logging:
  #     driver: none

  # ts_taskomatic:
  #   command: /engine/entrypoint.sh taskomatic
  #   container_name: vulnerability-tsengine-taskomatic
  #   build:
  #     context: ./
  #     dockerfile: ./Dockerfile
  #     args:
  #       PIPENV_CHECK: "${PIPENV_CHECK:-1}"
  #   image: vulnerability-tsengine-app:latest
  #   restart: unless-stopped
  #   env_file:
  #     - ./conf/common.env
  #     - ./conf/taskomatic.env
  #   depends_on:
  #     - ts_database

  ts_advisor_listener:
    command: /engine/entrypoint.sh advisor-listener
    container_name: vulnerability-tsengine-advisor-listener
    build:
      context: ./
      dockerfile: ./Dockerfile
      args:
        PIPENV_CHECK: "${PIPENV_CHECK:-1}"
    image: vulnerability-tsengine-app:latest
    restart: unless-stopped
    env_file:
      - ./conf/common.env
      - ./conf/advisor_listener.env
    depends_on:
      - ts_database
      - ts_platform_mock

volumes:
  vulnerability-tsengine-db-data:
  ts-prometheus-data:
